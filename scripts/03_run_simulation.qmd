---
title: "Simulation script"
subtitle: "Simulate different scenarios and missingness mitigation approaches"
author: "Janick Weberpals"
date: "`r Sys.Date()`"
code-fold: false
params:
  n_replicates: 1000
---

```{r}
#| label: setup
#| include: false

library(here)
library(arrow)
library(dplyr)
library(parallel)
library(tictoc)

source(here("functions", "run_simulation.R"))
source(here::here("functions", "generate_data.R"))

n_replicates <- params$n_replicates

mock_cohort <- generate_data(
  seed = 42, 
  n_total = 10
  )

# start timer
tic()
```

## Objective

In this section, we will generate `r n_replicates` following different missingness scenarios.

```{r}
# define column numbers for pattern and weight determination
col_Z2 <- which(colnames(mock_cohort) %in% "Z2")
col_U <- which(colnames(mock_cohort) %in% "U")

# define missingness pattern
default_pattern <- rep(1, ncol(mock_cohort))
pattern <- replace(default_pattern, col_Z2, 0)

# define weights 
default_weights <- rep(0, ncol(mock_cohort))
weights <- replace(default_weights, c(col_Z2, col_U), c(0.2, 0.8))

prop <- 0.5
```


## Continuous distribution probabilities

Probabilities are based on a continuous distribution. 

```{r}
tic(msg = "Simulation based on continuous distribution")

results <- parallel::mclapply(
  X = 1:n_replicates,
  FUN = run_simulation,
  pattern = pattern,
  weights = weights,
  type = "RIGHT",
  prop = prop,
  mc.cores = parallel::detectCores()-1
  ) 
  
results_cont <- do.call(rbind, results) |> 
  mutate(simulation = "Continuous distribution (RIGHT)")

toc()
```

## Discrete distribution probabilities

Probabilities are based on a discrete distribution. 

```{r}
tic(msg = "Simulation based on discrete distribution")

odds <- c(1, 2, 3, 4)

results <- parallel::mclapply(
  X = 1:n_replicates,
  FUN = run_simulation,
  pattern = pattern,
  weights = weights,
  odds = odds,
  prop = prop,
  mc.cores = parallel::detectCores()-1
  ) 
  
results_odds <- do.call(rbind, results) |> 
  mutate(simulation = paste0("Discrete odds (", paste0(odds, collapse = ", "), ")"))

toc()
```


## Save simulation results

```{r}
results_all <- rbind(results_cont, results_odds)

write_parquet(
  x = results_all, 
  sink = here("data", "simulation_results.parquet")
  )
```

## Session info

```{r, include=FALSE}
runtime <- toc()
```

Total script runtime: `r formatC((runtime$toc[[1]]-runtime$tic[[1]])/60, format = 'f', digits = 2)` minutes.

::: panel-tabset

### Loaded packages

```{r}
pander::pander(subset(data.frame(sessioninfo::package_info()), attached==TRUE, c(package, loadedversion)))
```

### Session info

```{r}
pander::pander(sessionInfo())
```

### Repositories

```{r}
pander::pander(options('repos'))
```
:::
